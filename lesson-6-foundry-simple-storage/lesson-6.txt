Notes from Lesson 6 Foundry Simple Storage:

We're gonna be using Foundry framework because it is much faster and efficient than hardhat and truffle.

RPC URL is https endpoint that we send API calls to when sending transactions.

Infura is a node as service provider.

The chain ID is used for signing transactions. It must match the chain ID returned by the network. 
You can enter a decimal or '0x'-prefixed hexadecimal number, but we will display the number in decimal.

Use command "anvil" to start the blockchain
You can use anvil or ganache to start the blockchain, ganache will give detailed output of transactions
Use below command to deploy to local blockchain, make sure the local blockchain is running, and the contract name is correct

"forge create SimpleStorage --interactive --rpc-url ${rpcUrl} --private-key ${privateKey}"

Don't ever paste private key in vs code terminal, or even in terminal history.
To remove history, use command "history -c"
Use command "history" to see history of your commands

Use the below command to convert hex values to decimal values, this comes built in Forge.
"cast --to-base ${hexValue} dec"

Testing git wsl


Lesson 6 Part 14: Deploying to local blockchain via Scripting
-------------------------------------------------------------

Use the .s.sol extension for scripting files in solidity. The .s.sol extension is a foundry convention.

The lib folder has a forge-std folder which stands for forge standard library. It has many utility 
functions you can use for deployment and scripting smart contracts.

vm.startBroadcast() means send everything after this line to the RPC. 
And vm.stopBroadcast() means stop sending after this line.

In foundry, if you don't specifiy an RPC Url then it will deploy to a temporary blockchain which will
be shut down after deployment.

Command to deploy via scripting:

const fileName = DeploySimpleStorage.s.sol
const rpcUrl = http://127.0.0.1:8545
const privateKey = process.env.PRIVATE_KEY

forge script script/${fileName} --rpc-url {$rpcUrl} --broadcast --private-key ${privateKey}


--broadcast flag means to send on a network instead of simulating it.

Lesson 6 Part 15: What is a transaction? (But actually)
-------------------------------------------------------

The transaction data sent in the https request on the blockchain is below:

Eg: 
"transaction": {
    "type": "0x02",
    "from": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
    "gas": "0x720cb",
    "value": "0x0",
    "data": "0x608060405234801561001057600080fd5b5061058a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632e64cec11461005c5780632ebce631146100735780636057361d146100945780638bab8dd5146100a9578063bc832d4e146100d4575b600080fd5b6000545b6040519081526020015b60405180910390f35b610086610081366004610249565b6100e7565b60405161006a929190610262565b6100a76100a2366004610249565b600055565b005b6100606100b73660046102ce565b805160208183018101805160028252928201919093012091525481565b6100a76100e236600461037f565b61019f565b600181815481106100f757600080fd5b6000918252602090912060029091020180546001820180549193509061011c906103fb565b80601f0160208091040260200160405190810160405280929190818152602001828054610148906103fb565b80156101955780601f1061016a57610100808354040283529160200191610195565b820191906000526020600020905b81548152906001019060200180831161017857829003601f168201915b5050505050905082565b6001604051806040016040528085815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093909452505083546001818101865594825260209182902084516002909202019081559083015192939092908301915061021e9082610484565b5050508260028383604051610234929190610544565b90815260405190819003602001902055505050565b60006020828403121561025b57600080fd5b5035919050565b82815260006020604081840152835180604085015260005b818110156102965785810183015185820160600152820161027a565b506000606082860101526060601f19601f830116850101925050509392505050565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156102e057600080fd5b813567ffffffffffffffff808211156102f857600080fd5b818401915084601f83011261030c57600080fd5b81358181111561031e5761031e6102b8565b604051601f8201601f19908116603f01168101908382118183101715610346576103466102b8565b8160405282815287602084870101111561035f57600080fd5b826020860160208301376000928101602001929092525095945050505050565b60008060006040848603121561039457600080fd5b83359250602084013567ffffffffffffffff808211156103b357600080fd5b818601915086601f8301126103c757600080fd5b8135818111156103d657600080fd5b8760208285010111156103e857600080fd5b6020830194508093505050509250925092565b600181811c9082168061040f57607f821691505b60208210810361042f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561047f57600081815260208120601f850160051c8101602086101561045c5750805b601f850160051c820191505b8181101561047b57828155600101610468565b5050505b505050565b815167ffffffffffffffff81111561049e5761049e6102b8565b6104b2816104ac84546103fb565b84610435565b602080601f8311600181146104e757600084156104cf5750858301515b600019600386901b1c1916600185901b17855561047b565b600085815260208120601f198616915b82811015610516578886015182559484019460019091019084016104f7565b50858210156105345787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b818382376000910190815291905056fea26469706673582212202073a8dc202872ccd6f18d9c7e8d421067d285ae9d09148e408889c2eba3086a64736f6c63430008150033",
    "nonce": "0x0",
    "accessList": []
},

All of the above values are in hex, we can convert to decimal using below command:

cast --to-base ${hexValue} dec

use below command to check other utilities

cast --help

Whenever we send a transaction on the blockchain, there is a signature happening using our private key under the hood.

Every single wallet has a counter of transcations which is basically a nonce. It increases by 1 for every transaction.

Every time you change something in the blockchain it goes through a transaction, and the change is always in the data field of the transaction
which contain opcodes that the EVM understands.


Lesson 6 Part 16: Private Key Safety II
--------------------------------------- 

We can put environment variables in .env files, we put sensitive variables in an .env file.
Never launch production code with the .env file.

When you have real money, you will not use .env to store private keys, you will use --interactive flag or we're gonna use keystore
file with a password once foundry adds it.


Lesson 6 Part 17: ThirdWeb Deploy
---------------------------------

You can use ThirdWeb to deploy to the blockchain, it is a development tool for faster developemnt of Dapp.


Lesson 6 Part 18: Cast Send
---------------------------

Foundry has another tool built-in called cast. A specific function of cast tool we will be using is called "send" which is used to sign
and publish a transcation.

To call a specific function of a smart contract using cast tool we can do:

cast send ${contractAddress} "${functionName}(${functionParameters})" ${functionArguments} --rpc-url ${rpcUrl} --private-key ${privateKey}

eg: 

cast send 0x5FbDB2315678afecb367f032d93F642f64180aa3 "store(uint256)" 123 --rpc-url http://blah-blah --private-key ${0x000000}


To read something on blockchain we use the following cast command, reading doesn't create a transaction on the blockchain:

cast call ${contractAddress} "${functionName}()"

When using this function we get the hex value back, this is where we we use cast's "-to-base" flag to convert hex to decimal.


Lesson 6 Part 19: Deploy to Testnet
-----------------------------------

First we're gonna need an RPC URL for an actual testnet. You can either have your own RPC url by running a node on your machine.
Or you can use node as a service providers like Alchemy, Infura, QuickNode, etc.

Then you're gonna need a private key for an actual testnet account, you can create one on metamask and get the private key.

Store both of them in .env and run the same deployment command but with the --broadcast flag so it sends to the testnet instead of simulating it.


Lesson 6 Part 20: Manual Verification
-----------------------------------

On etherscan, if you switch to the bytecode tab you can see the bytecode of the contract. Which is not very readable and ugly to look at.
What you can do is verify the contract so that everyone can read the code.

The manual way to verify a contract on Etherscan is:

1. Clicking on verify contract, on the contract tab.
2. Selecting compiler type, in our case solidity single file
3. Selecting compiler and click on continue
4. Copy the contract code, and paste it in the contract code field and select optimize to yes.
5. Pass the captcha, then verify and publish button.
6. Check on the contract tab, and you will see the contract code if it was done correctly.


By verifying a contract, people can interact with your contract from within etherscan just like remix.


Lesson 6 Part 21: Cleaning up
-----------------------------

To automatically format code, use `forge fmt` command.

Always create a ReadMe.md file for every project you create. This will give other people information about your project, how to run it.
And any other information that they should know.

You can use AI to write markdown for your project.


Lesson 6 Part 22: Alchemy & The mempool
---------------------------------------

Alchemy has really cool features when learning what happens with our transaction, when we send a transaction it gets sent to a mempool.
It enters the mempool and waits for a miner to pick it up and put it in a block.

Features of Alchemy:

Alchemy is a node provider, and web3 development platform.

Alchemy provides development tools to help you build and scale your blockchain application.
They are reliable, scalable and accurate.

Alchemy SuperNode:

Supernode is a blockchain engine that acts as a load balancer on top of your node and makes sure you get the latest
available data from the blockchain. They have enhanced APIs which allow you to pull data from the blockchain.

Alchemy supports majority of EVM chains, and solana as well.

The dashboard has all of the metrics to understand your application's performance.

You can also debug the errors of your transactions within from the dashboard.

It also has a mempool watcher which shows you all of the transactions, mined, dropped, or pending.

Alchemy's documentation has all of the information you need to get started.


---------------
Lesson 6 Recap:

- Learned how to create new foundry project using "forge --init"
- Basic foundry commands such as Cast, Anvil and Forge.
- Forge is used for compiling and interacting with contracts
- Cast is used for interacting with contracts that have been deployed.
- Anvil is used to deploy a local blockchain.
- When we send a transaction in our metamask we send an Http request to the RPC URL.
- We can also use node-as-a-service providers to have our own RPC url and make transactions from our Foundry project.
- Learnt how to compile and deploy smart contract using scripts in foundry.
- Leant how to keep our private keys safe using environment variables.
- Learnt how to auto format our contracts using "forge fmt".