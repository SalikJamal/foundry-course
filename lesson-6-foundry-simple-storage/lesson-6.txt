Notes from Lesson 6 Foundry Simple Storage:

We're gonna be using Foundry framework because it is much faster and efficient than hardhat and truffle.

RPC URL is https endpoint that we send API calls to when sending transactions.

Infura is a node as service provider.

The chain ID is used for signing transactions. It must match the chain ID returned by the network. 
You can enter a decimal or '0x'-prefixed hexadecimal number, but we will display the number in decimal.

Use command "anvil" to start the blockchain
You can use anvil or ganache to start the blockchain, ganache will give detailed output of transactions
Use below command to deploy to local blockchain, make sure the local blockchain is running, and the contract name is correct

"forge create SimpleStorage --interactive --rpc-url ${rpcUrl} --private-key ${privateKey}"

Don't ever paste private key in vs code terminal, or even in terminal history.
To remove history, use command "history -c"
Use command "history" to see history of your commands

Use the below command to convert hex values to decimal values, this comes built in Forge.
"cast --to-base ${hexValue} dec"

Testing git wsl


Lesson 6 Part 14: Deploying to local blockchain via Scripting
-------------------------------------------------------------

Use the .s.sol extension for scripting files in solidity. The .s.sol extension is a foundry convention.

The lib folder has a forge-std folder which stands for forge standard library. It has many utility 
functions you can use for deployment and scripting smart contracts.

vm.startBroadcast() means send everything after this line to the RPC. 
And vm.stopBroadcast() means stop sending after this line.

In foundry, if you don't specifiy an RPC Url then it will deploy to a temporary blockchain which will
be shut down after deployment.

Command to deploy via scripting:

const fileName = DeploySimpleStorage.s.sol
const rpcUrl = http://127.0.0.1:8545
const privateKey = process.env.PRIVATE_KEY

forge script script/${fileName} --rpc-url {$rpcUrl} --broadcast --private-key ${privateKey}


Lesson 6 Part 15: What is a transaction? (But actually)
-------------------------------------------------------

The transaction data sent in the https request on the blockchain is below:

Eg: 
"transaction": {
    "type": "0x02",
    "from": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
    "gas": "0x720cb",
    "value": "0x0",
    "data": "0x608060405234801561001057600080fd5b5061058a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632e64cec11461005c5780632ebce631146100735780636057361d146100945780638bab8dd5146100a9578063bc832d4e146100d4575b600080fd5b6000545b6040519081526020015b60405180910390f35b610086610081366004610249565b6100e7565b60405161006a929190610262565b6100a76100a2366004610249565b600055565b005b6100606100b73660046102ce565b805160208183018101805160028252928201919093012091525481565b6100a76100e236600461037f565b61019f565b600181815481106100f757600080fd5b6000918252602090912060029091020180546001820180549193509061011c906103fb565b80601f0160208091040260200160405190810160405280929190818152602001828054610148906103fb565b80156101955780601f1061016a57610100808354040283529160200191610195565b820191906000526020600020905b81548152906001019060200180831161017857829003601f168201915b5050505050905082565b6001604051806040016040528085815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093909452505083546001818101865594825260209182902084516002909202019081559083015192939092908301915061021e9082610484565b5050508260028383604051610234929190610544565b90815260405190819003602001902055505050565b60006020828403121561025b57600080fd5b5035919050565b82815260006020604081840152835180604085015260005b818110156102965785810183015185820160600152820161027a565b506000606082860101526060601f19601f830116850101925050509392505050565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156102e057600080fd5b813567ffffffffffffffff808211156102f857600080fd5b818401915084601f83011261030c57600080fd5b81358181111561031e5761031e6102b8565b604051601f8201601f19908116603f01168101908382118183101715610346576103466102b8565b8160405282815287602084870101111561035f57600080fd5b826020860160208301376000928101602001929092525095945050505050565b60008060006040848603121561039457600080fd5b83359250602084013567ffffffffffffffff808211156103b357600080fd5b818601915086601f8301126103c757600080fd5b8135818111156103d657600080fd5b8760208285010111156103e857600080fd5b6020830194508093505050509250925092565b600181811c9082168061040f57607f821691505b60208210810361042f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561047f57600081815260208120601f850160051c8101602086101561045c5750805b601f850160051c820191505b8181101561047b57828155600101610468565b5050505b505050565b815167ffffffffffffffff81111561049e5761049e6102b8565b6104b2816104ac84546103fb565b84610435565b602080601f8311600181146104e757600084156104cf5750858301515b600019600386901b1c1916600185901b17855561047b565b600085815260208120601f198616915b82811015610516578886015182559484019460019091019084016104f7565b50858210156105345787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b818382376000910190815291905056fea26469706673582212202073a8dc202872ccd6f18d9c7e8d421067d285ae9d09148e408889c2eba3086a64736f6c63430008150033",
    "nonce": "0x0",
    "accessList": []
},

All of the above values are in hex, we can convert to decimal using below command:

cast --to-base ${hexValue} dec

use below command to check other utilities

cast --help

Whenever we send a transaction on the blockchain, there is a signature happening using our private key under the hood.

Every single wallet has a counter of transcations which is basically a nonce. It increases by 1 for every transaction.

Every time you change something in the blockchain it goes through a transaction, and the change is always in the data field of the transaction
which contain opcodes that the EVM understands.