Notes from Lesson 4 Remix Fund Me:

What are we making?

We're making a crowd funding app like kickstart, or a way to raise money.
Allowing users to send EVM based coin and allow owner of the contract to withdraw funds to spend on their project.
We're gonna deploy on Sepolia testnet.
A minimum funding amount will be set to $5.

To allow a smart contract to receive Ether or native cryptocurrency, we need to add the "payable" modifier in function signature.
Just like wallets, contracts can also hold coins.
You can access the value sent to the function with "msg.value" where value is the amount sent.

Use the require function to put checks in the function. If it passes, it'll continue otherwise it'll revert the transaction.

What is a revert?
A revert undos any action that have been done, and sends the remaining gas back.
If you send a failed transaction, you will still spend gas but it'll revert everything back and return the remaining gas back.

Every single transaction you send will have following fields:

1. Nonce: tx count for the account
2. Gas Price: price per unit of gas (in wei)
3. Gas limit: max gas that this tx can use
4. To: address that the tx is sent to
5. value: amount of wei sent in the transaction
6. Data: what to send to the "To" address
7. v, r, s: components of tx signature

How to convert a dollar value to the equivalent of ether in order to make the minimum amount check.
We'll be using decentralized oracles for this, Chainlink.


The smart contract connectivity problem or the oracle problem is that smart contracts can not see or compute with external/outside data.
because if smart contracts had different values per computation, like an API call, or a random number, or 1 + 1 for a variable then they 
will never reach consensus that's why we rely on oracles to bring in external data to the smart contracts.

Centralized oracles are a point of failure, because they're not decentralized. We don't need our data from centralized nodes.
Chainlink has decentralized oracles network which is awesome for this thing.

Blockchains can't do API calls

Chainlink networks can be completely customized to bring any data or any computation that we want.
Chainlink is a technology to get external data and computation into our smart contracts, and getting that data in a decentralized manner.
Chainlink data feeds are powering over $50 billion users in Defi World

Interfaces:

Interfaces are contracts which only has function signatures in it. It doesn't have a constructor neither any state variables.
Interfaces are used to standardize different smart contracts for interoperability. 
Even though the interface itself doesn't have any logic, when a contract implements that interface, 
it provides the implementation details and return values for the functions defined in the interface.

Interfaces act as a way to enforce a contract's adherence to a specific set of functions, enabling contracts 
to interact in a standardized manner. By implementing the interface, the contract guarantees the presence of
those functions, allowing other contracts or external code to utilize the contract's functionality through 
the interface without needing knowledge of the specific implementation details.

You can typecast variables by wrapping variables into parenthesis of the variable type, eg:

uint256 price = 10;
typecasting to int256
int256(price);

Always multiply before dividing because only whole numbers work in solidity.

"Gas estimation failed" error generally means something is wrong in the code.

msg.sender refers to whoever calls the function.
msg.value refers to the amount of Ether send with the transaction, which is not the gas fees it is irrespective of the gas fees.

You can add labels to mapping like this, to make it easier to understand the mapping.

mapping(address To => uint256 amountSent)


Mid lesson recap:

When we want to interact with any contract, we need address and ABI of that contract.
Chainlink price feeds are an easy way to get pricing data from the real world into our smart contracts.
In EVM, decimals don't work so always remember to use correct number of units.
msg.value, and msg.sender are global variables. value is the amount of wei sent with the transaction, and sender is the address which
initiated the transaction.


What is a library in solidity?

Library is a type of contract which let's you reuse code but you can't declare state variables and you can't send ether.
Library is embedded into the contract if all library functions are internal, otherwise the library must be deployed and 
then linked before contract is deployed.

libraries don't have state variable and all functions are marked internal.
You import libraries same as any contract.
You declare libraries using "library" keyword instead of the contract keyword.

To bind functions from a library to a specific datatype do the following, eg: uint256

using PriceConverter for uint256;
        library ↑     datatype ↑

When you bind libraries to datatype like above you can use them like this:

msg.value.getPrice();
library function ↑

The msg.value is the first parameter of that function, in case of 2 parameter, the second parameter will then go in the paranthesis.


SafeMath library??

Before version 0.8 of solidity, safeMath was used in almost all of the contracts, but now not anymore.
Before version 0.8 you could overflow the max limit of a uint which would reset it to lowest value again.
This would result in loss of data, so the safeMath library was used to check if any arithmetic operation is overflowing or underflowing
a variable and would throw error to prevent loss of data.

After version 0.8, solidity does everything that safeMath library does but about of the box, so no need for additional
libraries.

You can use the "unchecked" keyword to disable checks for underflowing and overflowing in versions later than 0.8.
Using the "unchecked" keyword can allow for gas optimization, but only use it if you're 1000% sure the variable will not undeflow or overflow.

Integer Overflow:

In simple terms, overflow occurs when an unsigned integer (uint) reaches its maximum value. After that, any value added 
to it will then rotate the value from the beginning of its range. 

Let's say we have an uint256 variable, which can only hold values in the range [0, 2^256 - 1].

The result would be the lowest value in this uint256 range, which is 0, if you increase the highest number in this range by 1. This is an overflow.

0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
+ 0x000000000000000000000000000000000001
-----------------------------------------
= 0x000000000000000000000000000000000000

Integer Underflow:

Since unsigned integers cannot support signed (negative) numbers, subtracting 1 from its lowest value 0 would result in the
maximum value in its range, rather than -1. This is an underflow for uint256.

 0x000000000000000000000000000000000000
- 0x000000000000000000000000000000000001
----------------------------------------------------
= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF


How to send Ether or a native blockchain currency:

Three ways to do this:

1. Transfer

msg.sender is an address
payable msg.sender is an address that can transfer currency

payable(msg.sender).transfer(address(this).balance);

address(this) refers to the address of the contract
.balance functions returns balance of the contract

usually transfer cost 2100 gas, but our transfer function is capped at 2300, and if in case it goes above 2300 gas it'll throw error and rever the transaction.

2. Send

bool sendSuccess = payable(msg.sender).send(address(this).balance);
require(sendSuccess, "Send Failed");

send is also capped at 2300 gas and it'll return a boolean for success or fail sending of ether, and will not revert until you do a requre statement.


3. Call

(bool callSuccess, bytes dataReturned) = payable(msg.sender).call{value: address(this).balance}("")
require(callSuccess, "Call Failed");

call will also not revert on itself in case of any issue until you do a require statment yourself based on the boolean it returns.
It also returns data which you can use when calling different methods using the call function.

The paranthesis after call "("")" specifies we are not calling any function in case of sending ether.

call with re-entrancy guard is the recommended way to use.

Constructors??

Constructors are functions which are run when the contract is deployed. They will operate all the computation at the time of deployment of the contract.


Modifiers??

Modifiers are function modifier which can be created once and utilized in many places. They run a check, which you put, if it the check is true it executes the function
otherwise it reverts the transaction.

The _ defines the execution sequence in function if it is first in modifier, then the function code will run first then the modifier, if it is bottom in modifier.
Then the modifier will run and if its true then the function will run.

modifier onlyOwner {
    require(msg.sender == owner, "Sender is not the owner!");
    _;
}

Immutables & Constants??

constant variables shoud be declared and defined at compile time. There value cannot be changed once defined.
constant variables should be named all caps as per convention.

always use constants for variables that will not be changed once deployed the contract, a gas efficient method.

immutables variables are variables that don't need to be defined as they're declared, they can be defined later like in the constructor for owner address.
use immutable keyword for these type of variables.

convetion for naming immutable variables is i_variableName, like i_owner;

Custom errors??

custom errors save gas instead of the entire string which is saved in storage.
its an if statment instead of require.

Receive and Fallback??

What happens if someone send ether to the contract without calling the appropriate function?

Whenever we send ethereum or make a transaction to a contract as long as there's no data associated with that transaction, then the receive function
will get called.

Receive function:
A contract can have at most one receive function, declared using receive() external payable { ... } 
(without the function keyword). This function cannot have arguments, cannot return anything and must 
have external visibility and payable state mutability. It can be virtual, can override and can have modifiers.

The receive function is executed on a call to the contract with empty calldata. This is the function that is executed
on plain Ether transfers (e.g. via .send() or .transfer()). If no such function exists, but a payable fallback function
exists, the fallback function will be called on a plain Ether transfer. If neither a receive Ether nor a payable 
fallback function is present, the contract cannot receive Ether through a transaction that does not represent a 
payable function call and throws an exception.

Receive function always have empty call data.

Fallback function:
A contract can have at most one fallback function, declared using either fallback () external [payable] 
or fallback (bytes calldata input) external [payable] returns (bytes memory output) (both without the function keyword). 
This function must have external visibility. A fallback function can be virtual, can override and can have modifiers.

The fallback function is executed on a call to the contract if none of the other functions match the given function signature, 
or if no data was supplied at all and there is no receive Ether function. The fallback function always receives data,
but in order to also receive Ether it must be marked payable.

fallback function can also work even if calldata is send with the transaction.

contract ReceiveEther {
    /*
    Which function is called, fallback() or receive()?

           send Ether
               |
         msg.data is empty?
              / \
            yes  no
            /     \
receive() exists?  fallback()
         /   \
        yes   no
        /      \
    receive()   fallback()
    */

    // Function to receive Ether. msg.data must be empty
    receive() external payable {}

    // Fallback function is called when msg.data is not empty
    fallback() external payable {}

    function getBalance() public view returns (uint) {
        return address(this).balance;
    }
}

Ether Units:

A literal number can take a suffix of wei, gwei or ether to specify a subdenomination of Ether, 
where Ether numbers without a postfix are assumed to be Wei.

assert(1 wei == 1); // 1 wei is equal to 1
assert(1 gwei == 1e9); // 1000000000
assert(1 ether == 1e18); // 1000000000000000000

Lesson 4 RECAP:

- Solidity has two special functions receive, fallback & constructors.
- If data is sent but no function specified then fallback(), if no data then receive()
- Constant & immutable are variables that can save us gas.
- Constants are variables that are declared and defined at compile time and never changed again.
- immutables are variables which can be declared and defined in the constructor once.


Lesson 4 Challenge Contract: https://sepolia.etherscan.io/address/0x1b30DA2a868704483143A4D46865Ac9585629fd0#code