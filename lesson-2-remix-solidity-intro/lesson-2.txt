Notes from Lesson 2 Simple Storage:

Remix Intro:

Always define version on top of your contract file because it is important to know specifiy version of solidity you are using.

Write comments in code to refer and understand it later on.

To use range of solidity version for your contract define it like:

pragma soldity >= 0.8.0 < 0.9.0;

Always define SPDX License identifier so it simplies licensing code later on.

To create contract use the keyword "contract" which is very similar to classes in JavaScript.

Basic solidity data types, if not initialized they will be set to their default values.

boolean, (true/false) (default = false)
uint, (positive whole number) (default = 0)
int, (signed whole number, positive or negative) (default = 0)
address, (ethereum address) (default = 0x000000000000000)
bytes (bytes is a lower level type) (default = 0x00)


bit and bytes are units to measure computer data
bytes consist of 8 bits
bits are just 1 and 0'
big B is for bytes
small b is for bits


Solidity function/methods:

Functions or methods are very specific or small piece of code to reuse in the application.
Arguments in function should have a different name than state variables to differentiate.

Similar to our addresses our smart contracts have their own addresses and wallet as well.

Any modifications on the blockchain our done executing transactions.

Default visibility of state variables is internal.

State variables visibility:

public:
Public state variables differ from internal ones only in that the compiler automatically generates getter 
functions for them, which allows other contracts to read their values. When used within the same contract, 
the external access (e.g. this.x) invokes the getter while internal access (e.g. x) gets the variable value directly from storage.
Setter functions are not generated so other contracts cannot directly modify their values.

internal:
Internal state variables can only be accessed from within the contract they are defined in and in derived contracts. 
They cannot be accessed externally. This is the default visibility level for state variables.

private:
Private state variables are like internal ones but they are not visible in derived contracts.


Function Visibility:

external:
External functions are part of the contract interface, which means they can be called from other contracts and via transactions. 
An external function f cannot be called internally (i.e. f() does not work, but this.f() works).

public:
Public functions are part of the contract interface and can be either called internally or via message calls.

internal:
Internal functions can only be accessed from within the current contract or contracts deriving from it. They cannot be accessed externally. 
Since they are not exposed to the outside through the contractâ€™s ABI, they can take parameters of internal types like mappings or storage references.

private:
Private functions are like internal ones but they are not visible in derived contracts.

Making something private or internal only prevents other contracts from reading or modifying the information, 
but it will still be visible to the whole world outside of the blockchain.

Solidity has some functions that don't have to create a transaction to call them, these functions have the modifier "view or pure" in it. But calling
a view or pure function does cost gas only when a gas cost transaction is calling it.


A function marked "view" means we're going to read state from the blockchain.
A function market "pure" means we're going to neither read or modify the state.

State variables are also knowns as storage variables.

The "return" keyword specifies what the function will return.

Arrays & Structs:

Arrays which don't have a fixed length are called dynamic Arrays

uint256[4] staticArray = [0, 1, 2, 3]; // Static Array
uint256[] dynamicArray = []; // Dynamic Array

Errors & Warnings:

Warnings are just warnings, they won't prevent you from deploying, but its good measure to always get rid of all warnings. Warnings are in yellow.
Errors on the other hand will not let you deploy until are resolved. Errors are in red.

Memory, Storage & Calldata:

Inside of functions most variables default to memory variables.


Evm manages information in six places:

Memory: Memory is the place where the variable exists for the duration of function call only. Memory keyword needs to be specified for mappings, structs and arrays. Strings are also an array of bytes.
Difference between calldata and memory is that memory variable can be manipulated, reassigned but calldata cannot be modified or resigned.

Calldata: Similar to Memory, cannot be reassigned or modified and both are temporary variables.


Storage: Storage are permanent variables that can be modified. All variables outside functions are storage variables in the contract.

Code

Logs

Stack

Mappings:
Mappings are key value pairs, where the key will always point its value. The keys should always be unique. Default values for all the keys in mappings is the default value for that data type.

Deploying your contract:

1. Inject Metamask in the environment and connect your account.
2. Select the appropriate network.
3. Click on the deploy button on the deploy and run transactions tab.
4. Use the methods which'll popup metamask if the method is modifying the blockchain.

Contract deployed on Sepolia Testnet, contract address: 0x9a6774007373279050aC35B83EBf35d11811fd64

Lesson 2 Recap:

EVM (Ethereum Virtual Machine), your contract is compiled into opcodes which the EVM checks and runs your code with.
Some EVM compatible blockchain and L2s are:

Ethereum
Polygon
Arbitrum
Optimism
zkSync
etc


Always first write the solidity version
Then SPDX license identifier, mostly MIT
Then name your contract,
Define your datatype and variables, like uint, mapping, strings, arrays, structs etc.
Functions that modify the state of blockchain will cost gas and will register a transaction.
Functions that don't modify the state will not initiate a transaction.
We can specify different data locations for our functions, like calldata and memory.
When we compile our contract it compiles our code to EVM compatible Opcodes, byte code.

Lesson 2 Challenge Contract: https://sepolia.etherscan.io/address/0x5c1ddb86F11BB46D3067C702AC554aEaED9ff8f0#code