---------------------------------
Lesson 7 Part 1 | Foundry Fund Me

We are gonna be creating our remix-fund-me project in Foundry toolkit now.

We'll be doing professional testing, scripting and deployment using Foundry.


--------------------------------------
Lesson 7 Part 2 | Testing Introduction

You can use the following command to run the tests:

forge test

This command will run all the tests in the test file and check if they pass or fail.
In our Counter.t.sol file, what will happen is:

1. It will deploy our Counter smart contract, sets the number to 0
2. Then increments the number to 1, then checks/asserts if the number is equal to 1


--------------------------------------
Lesson 7 Part 3 | Setup continued

We copy all of the contract from RemixFundMe and copy it in this project.

We can install the dependencies using:

forge install ${organizationName/repoName}@${version} ${flags}
Eg: forge install smartcontractkit/chainlink-brownie-contracts@0.8.0 --no-commit

Use "forge compile" to compile the contracts.


----------------------
Lesson 7 Part 4 | Test

You cannot go for an audit without writing tests for your smart contract, you will be rejected and be perceived as an amateur.
Writing badass tests separates you from all the mediocre devs.

import test from 'forge-std/Test.sol' to import all the test functions.

The first function that always runs in your test file is the "setUp" function.

Import the console function to console.log in your contract.

In order to enable visiblity of logging you need to use the command "forge test -vv"

"assertEq" mean assert Equals to. Use this function to check if a value equals to another value.

The first thing when writing tests is to:

Check if our contract is deploying correctly:
    - Import the contract in the test file
    - Deploy the contract in the setUp function
    - Check the contract deployment by checking a public variable or function


----------------------
Lesson 7 Part 5 | Debugging Tests

How to find out what's the issue when a test fails?

We can console.log the variables to check thier values.

Use the command "forge test -vv" to enable verbose logging.