---------------------------------
Lesson 7 Part 1 | Foundry Fund Me

We are gonna be creating our remix-fund-me project in Foundry toolkit now.

We'll be doing professional testing, scripting and deployment using Foundry.


--------------------------------------
Lesson 7 Part 2 | Testing Introduction

You can use the following command to run the tests:

forge test

This command will run all the tests in the test file and check if they pass or fail.
In our Counter.t.sol file, what will happen is:

1. It will deploy our Counter smart contract, sets the number to 0
2. Then increments the number to 1, then checks/asserts if the number is equal to 1


--------------------------------------
Lesson 7 Part 3 | Setup continued

We copy all of the contract from RemixFundMe and copy it in this project.

We can install the dependencies using:

forge install ${organizationName/repoName}@${version} ${flags}
Eg: forge install smartcontractkit/chainlink-brownie-contracts@0.8.0 --no-commit

Use "forge compile" to compile the contracts.


----------------------
Lesson 7 Part 4 | Test

You cannot go for an audit without writing tests for your smart contract, you will be rejected and be perceived as an amateur.
Writing badass tests separates you from all the mediocre devs.

import test from 'forge-std/Test.sol' to import all the test functions.

The first function that always runs in your test file is the "setUp" function.

Import the console function to console.log in your contract.

In order to enable visiblity of logging you need to use the command "forge test -vv"

"assertEq" mean assert Equals to. Use this function to check if a value equals to another value.

The first thing when writing tests is to:

Check if our contract is deploying correctly:
    - Import the contract in the test file
    - Deploy the contract in the setUp function
    - Check the contract deployment by checking a public variable or function


---------------------------------
Lesson 7 Part 5 | Debugging Tests

How to find out what's the issue when a test fails?

We can console.log the variables to check thier values.

Use the command "forge test -vv" to enable verbose logging.


---------------------------------
Lesson 7 Part 6 | Advanced Deploy Scripts

Scripting allows you to deploy your smart contracts on one command instead of deploying them manually.
This makes the process smooth and hassle free.

Import the Script contract from "forge-std/Script.sol" to use the functions.

Create the run function to deploy the contract.

vm.startBroadcast() means send everything after this line to the RPC. 
And vm.stopBroadcast() means stop sending after this line.


---------------------------------
Lesson 7 Part 7 | Forked Tests

To run a single test use below command:

forge test --match-test ${testFunctionName}

The default behavior for forge test is to only display a summary of passing and failing tests. 
You can control this behavior by increasing the verbosity (using the -v flag). 
Each level of verbosity adds more information:

Level 2 (-vv): Logs emitted during tests are also displayed. That includes assertion errors from tests, 
showing information such as expected vs actual.
Level 3 (-vvv): Stack traces for failing tests are also displayed.
Level 4 (-vvvv): Stack traces for all tests are displayed, and setup traces for failing tests are displayed.
Level 5 (-vvvvv): Stack traces and setup traces are always displayed.


When you run tests or deploy contract without specifying the network, it runs on the local anvil blockchain.

What should we do to work with contracts outside our local blockchain?

When we run our tests, we can pass an $RPC_URL in the --fork-url flag which will fork the blockchain from that url.

Eg: forge test --match-test ${testFunctionName} -vvv --fork-url ${RPC_URL}

The issue with forking is that you will run many API calls which will run up your bill. So try to avoid forking as much as possible.
Only do it with the tests that can't be done locally.

We can use the below command to see how much our code is tested, we can pass the RPC_URL as well using the --fork-url flag

forge coverage 

Testing modes:
1. Unit
    - Testing a specific part of our code

2. Integration
    - Testing how our code works with other parts of our code

3. Forked
    - Testing our code on a simulated real environment

4. Staging
    - Testing our code in a real environment that is not production

